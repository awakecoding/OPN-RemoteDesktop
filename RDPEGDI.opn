protocol RDPEGDI with
Visualization{AliasName = "RDP"},
BinaryEncodingDefaults{Endian = Endian.Little},
Documentation
{
    ProtocolName = "Remote Desktop Protocol: Graphics Device Interface (GDI) Acceleration Extensions",
    DocumentName = "MS-RDPEGDI",
    ShortName = "RDPEGDI",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References =
        [
            new Reference{Name = "MS-RDPEGDI", Version = "27.0", Date = "08/08/2013", ProgramName = ProgramName.MCPP},
        ],
    RevisionSummary =
        [
            new Revision{Class=RevisionClass.Major, Version="372482", Date="12/16/2014"}
        ]
};

using Standard;
using Utility;
using RDPBCGR;
using T125;

endpoint Server over T125.Node
    accepts ClientBitmapCacheErrorPDU
    accepts ClientOffscreenBitmapCacheErrorPDU
    accepts ClientDrawNineGridCacheErrorPDU
    accepts ClientGDIPlusErrorPDU;
    
client endpoint Client connected to Server;

autostart actor RDPEGDIOverT125(T125.Node node) follows RDPBCGROverT125
{    
    process node accepts domainMCSPDU:T125.DomainMCSPDU where (domainMCSPDU.DomainMCSPDU is T125.SendDataRequestPattern)
    {
        ulong indexPort = (domainMCSPDU#T125SourcePort != nothing) ? (domainMCSPDU#T125SourcePort as ulong) : 0;
        bool ServerMCSConnectResponsePDUReceived = (indexPort in ServerMCSConnectResponsePDUReceivedFlags) ? ServerMCSConnectResponsePDUReceivedFlags[indexPort] : false;
        uint encryptionLevel = (indexPort in encryptionLevels) ? encryptionLevels[indexPort] : 0;
        // Used for GetPduType method
        if (encryptionLevel == TSUDSCSec1EncryptionLevel.EncryptionLevelLow)
        {
            encryptionLevel = TSUDSCSec1EncryptionLevel.EncryptionLevelHigh;
        }
        uint encryptionMethod = (indexPort in encryptionMethods) ? encryptionMethods[indexPort] : 0;
        
        binary payload = (domainMCSPDU.DomainMCSPDU as SendDataRequestPattern).UserData as binary;
        int pduType = RDPBCGR.GetPduType(payload, encryptionLevel, encryptionMethod, RDPBCGRMsgType.MonitorLayoutPdu);
        int pduType2 = RDPBCGR.GetPdu2Type(payload, encryptionLevel, encryptionMethod, RDPBCGRMsgType.MonitorLayoutPdu);
        
        if (ServerMCSConnectResponsePDUReceived && pduType == 0x07)
        { 
            switch (pduType2)
            { 
                case 0x2C =>
                    var m = BinaryDecoder<ClientBitmapCacheErrorPDU[encryptionLevel, encryptionMethod]>(payload);
                    if (m != nothing)
                    {
                        var msg = m as ClientBitmapCacheErrorPDU;
                        dispatch endpoint Server accepts msg;
                    }
                    else
                    {
                        ThrowDecodingException("RDPEGDI", "ClientBitmapCacheErrorPDU");
                    }
                case 0x2E =>
                    var m = BinaryDecoder<ClientOffscreenBitmapCacheErrorPDU[encryptionLevel, encryptionMethod]>(payload);
                    if (m != nothing)
                    {
                        var msg = m as ClientOffscreenBitmapCacheErrorPDU;
                        dispatch endpoint Server accepts msg;
                    }
                    else
                    {
                        ThrowDecodingException("RDPEGDI", "ClientOffscreenBitmapCacheErrorPDU");
                    }
                case 0x30 =>
                    var m = BinaryDecoder<ClientDrawNineGridCacheErrorPDU[encryptionLevel, encryptionMethod]>(payload);
                    if (m != nothing)
                    {
                        var msg = m as ClientDrawNineGridCacheErrorPDU;
                        dispatch endpoint Server accepts msg;
                    }
                    else
                    {
                        ThrowDecodingException("RDPEGDI", "ClientDrawNineGridCacheErrorPDU");
                    }
                case 0x31 =>
                    var m = BinaryDecoder<ClientGDIPlusErrorPDU[encryptionLevel, encryptionMethod]>(payload);
                    if (m != nothing)
                    {
                        var msg = m as ClientGDIPlusErrorPDU;
                        dispatch endpoint Server accepts msg;
                    }
                    else
                    {
                        ThrowDecodingException("RDPEGDI", "ClientGDIPlusErrorPDU");
                    }
                default =>  
                    reject;
            }
        }
        else
        {
            reject;
        }
    }
}

// Section 2.2.2.3.1 Client Bitmap Cache Error PDU
message ClientBitmapCacheErrorPDU[TSUDSCSec1EncryptionLevel EncryptionLevel, TSUDSCSec1EncryptionMethod EncryptionMethod]
{
    optional [|EncryptionLevel > 0|] ([|EncryptionMethod in {TSUDSCSec1EncryptionMethod.EncryptionMethod40Bit,
                                      TSUDSCSec1EncryptionMethod.EncryptionMethod128Bit,
                                      TSUDSCSec1EncryptionMethod.EncryptionMethod56Bit}|] NonFipsSecurityHeader |
                                     [|EncryptionMethod == TSUDSCSec1EncryptionMethod.EncryptionMethodFips|] FipsSecurityHeader) securityHeader;
    BitmapCacheErrorPDUData bitmapCacheErrorPduData;
    
    override string ToString()
    {
        return "Client Bitmap Cache Error PDU";
    }
}

type BitmapCacheErrorPDUData
{
    TSShareDataHeader shareDataHeader;
    byte NumInfoBlocks;
    byte Pad1;
    ushort Pad2;
    array<BitmapCacheErrorInfo> Info;
}

type BitmapCacheErrorInfo
{
    byte CacheID;
    bBitFieldValue bBitField where ValidationCheckCombinationValueIncludeZero(InRange<bBitFieldValue>(value), null, false, ReferenceType.Type, "RDPEGDI", "bBitField", "BitmapCacheErrorInfo", "0x01, 0x02", value);
    ushort Pad;
    uint NewNumEntries;
}

pattern bBitFieldValue = flags byte
{
    BC_ERR_FLUSH_CACHE          = 0x01,
    BC_ERR_NEWNUMENTRIES_VALID  = 0x02,
    ...
};

// Section 2.2.2.3.2 Client Offscreen Bitmap Cache Error PDU
message ClientOffscreenBitmapCacheErrorPDU[TSUDSCSec1EncryptionLevel EncryptionLevel, TSUDSCSec1EncryptionMethod EncryptionMethod]
{
    optional [|EncryptionLevel > 0|] ([|EncryptionMethod in {TSUDSCSec1EncryptionMethod.EncryptionMethod40Bit,
                                      TSUDSCSec1EncryptionMethod.EncryptionMethod128Bit,
                                      TSUDSCSec1EncryptionMethod.EncryptionMethod56Bit}|] NonFipsSecurityHeader |
                                     [|EncryptionMethod == TSUDSCSec1EncryptionMethod.EncryptionMethodFips|] FipsSecurityHeader) securityHeader;
    OffscreenBitmapCacheErrorPDUData offscreenBitmapCacheErrorPduData;
    
    override string ToString()
    {
        return "Client Offscreen Bitmap Cache Error PDU";
    }
}

type OffscreenBitmapCacheErrorPDUData
{
    TSShareDataHeader shareDataHeader;
    OffscreenBitmapCacheErrorFlag $"flags" where ValidationCheckValue(value == 0x00000001, null, true, ReferenceType.Type, "RDPEGDI", "flags", "OffscreenBitmapCacheErrorPDUData", "0x00000001", value);
}

pattern OffscreenBitmapCacheErrorFlag = flags uint
{
    OC_ERR_FLUSH_AND_DISABLE_OFFSCREEN  = 0x00000001,
    ...
};

// Section 2.2.2.3.3 Client DrawNineGrid Cache Error PDU
message ClientDrawNineGridCacheErrorPDU[TSUDSCSec1EncryptionLevel EncryptionLevel, TSUDSCSec1EncryptionMethod EncryptionMethod]
{
    optional [|EncryptionLevel > 0|] ([|EncryptionMethod in {TSUDSCSec1EncryptionMethod.EncryptionMethod40Bit,
                                      TSUDSCSec1EncryptionMethod.EncryptionMethod128Bit,
                                      TSUDSCSec1EncryptionMethod.EncryptionMethod56Bit}|] NonFipsSecurityHeader |
                                     [|EncryptionMethod == TSUDSCSec1EncryptionMethod.EncryptionMethodFips|] FipsSecurityHeader) securityHeader;
    DrawNineGridCacheErrorPDUData drawNineGridErrorPduData;
    
    override string ToString()
    {
        return "Client DrawNineGrid Cache Error PDU";
    }
}

type DrawNineGridCacheErrorPDUData
{
    TSShareDataHeader shareDataHeader;
    DrawNineCridBimapCacheErrorFlag $"flags" where ValidationCheckValue(value == 0x00000001, null, true, ReferenceType.Type, "RDPEGDI", "flags", "DrawNineGridCacheErrorPDUData", "0x00000001", value);
}

pattern DrawNineCridBimapCacheErrorFlag = flags uint
{
    DNG_ERR_FLUSH_AND_DISABLE_DRAWNINEGRID = 0x00000001,
    ...
};

// Section 2.2.2.3.4 Client GDI+ Error PDU
message ClientGDIPlusErrorPDU[TSUDSCSec1EncryptionLevel EncryptionLevel, TSUDSCSec1EncryptionMethod EncryptionMethod]
{
    optional [|EncryptionLevel > 0|] ([|EncryptionMethod in {TSUDSCSec1EncryptionMethod.EncryptionMethod40Bit,
                                      TSUDSCSec1EncryptionMethod.EncryptionMethod128Bit,
                                      TSUDSCSec1EncryptionMethod.EncryptionMethod56Bit}|] NonFipsSecurityHeader |
                                     [|EncryptionMethod == TSUDSCSec1EncryptionMethod.EncryptionMethodFips|] FipsSecurityHeader) securityHeader;
    GDIPlusErrorPDUData gdiplusErrorPduData;
    
    override string ToString()
    {
        return "Client GDI+ Error PDU";
    }
}

type GDIPlusErrorPDUData
{
    TSShareDataHeader shareDataHeader;
    GDIPlusErrorFlag $"flags" where ValidationCheckValue(value == 0x00000001, null, true, ReferenceType.Type, "RDPEGDI", "flags", "GDIPlusErrorPDUData", "0x00000001", value);
}

pattern GDIPlusErrorFlag = flags uint
{
    GDIPLUS_ERR_FLUSH_AND_DISABLE_DRAWGDIPLUS = 0x00000001,
    ...
};
