protocol RDPEVOR with
    BinaryEncodingDefaults{Endian = Endian.Little},
Documentation
{
    DocumentName = "MS-RDPEVOR",
    ProtocolName = "Remote Desktop Protocol: Video Optimized Remoting Virtual Channel Extension",
    ProtocolType = "block",
    DocumentTeam = "Pilot",
    ShortName = "RDPEVOR",
    Description = "Remote Desktop Protocol parser family"
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "MS-RDPEVOR", Version = "4.0", Date = "01/31/2013", ProgramName = ProgramName.MCPP}
        ],
    RevisionSummary =
        [
            new Revision{Class = RevisionClass.Major, Version = "355026", Date = "10/10/2013"}
        ]
};

using Standard;
using Utility;
using RDPEDYC;
using DTYP with Documentation {UsingKind = ReferenceKind.Reference};

endpoint Server over RDPEDYC.Server accepts TSMM_PRESENTATION_RESPONSE_MESSAGE issues TSMM_PRESENTATION_REQUEST_MESSAGE
                                    accepts TSMM_CLIENT_NOTIFICATION_MESSAGE
                                    issues TSMM_VIDEO_DATA_MESSAGE;
client endpoint Client connected to Server;

autostart actor RdpevorOverRdpedyc(RDPEDYC.Server server)
{
    //DYNVC_DATA
    process server accepts s:RDPEDYC.DVCDataPDU where (s#EDYCChannelName != nothing && (s#EDYCChannelName == "Microsoft::Windows::RDS::Video::Control::v08.01" || s#EDYCChannelName == "Microsoft::Windows::RDS::Video::Data::v08.01"))
    {
        if (s.Data[4] == 2)
        {
            switch (s.Data)
            {
                case tsmmPresentationResponseMsg:TSMM_PRESENTATION_RESPONSE_MESSAGE from BinaryDecoder<TSMM_PRESENTATION_RESPONSE_MESSAGE> =>
                    dispatch endpoint Server over server accepts tsmmPresentationResponseMsg;
                default =>
                    ThrowDecodingException("RDPEVOR", "TSMM_PRESENTATION_RESPONSE_MESSAGE");
            }
        }
        else if (s.Data[4] == 3)
        {
            switch (s.Data)
            {
                case tsmmClientNotificationMsg:TSMM_CLIENT_NOTIFICATION_MESSAGE from BinaryDecoder<TSMM_CLIENT_NOTIFICATION_MESSAGE> =>
                    dispatch endpoint Server over server accepts tsmmClientNotificationMsg;
                default =>
                    ThrowDecodingException("RDPEVOR", "TSMM_CLIENT_NOTIFICATION_MESSAGE");
            }
        }
        else
        {
            ThrowDecodingException("RDPEVOR");
        }
    }
    
    process server issues s:RDPEDYC.DVCDataPDU where (s#EDYCChannelName != nothing && (s#EDYCChannelName == "Microsoft::Windows::RDS::Video::Control::v08.01" || s#EDYCChannelName == "Microsoft::Windows::RDS::Video::Data::v08.01"))
    {
        if (s.Data[4] == 1)
        {
            switch (s.Data)
            {
                case tsmmPresentationRequestMsg:TSMM_PRESENTATION_REQUEST_MESSAGE from BinaryDecoder<TSMM_PRESENTATION_REQUEST_MESSAGE> =>
                    dispatch endpoint Server over server issues tsmmPresentationRequestMsg;
                default =>
                    ThrowDecodingException("RDPEVOR", "TSMM_PRESENTATION_REQUEST_MESSAGE");
            }
        }
        else if (s.Data[4] == 4)
        {
            switch (s.Data)
            {
                case tsmmVideoDataMsg:TSMM_VIDEO_DATA_MESSAGE from BinaryDecoder<TSMM_VIDEO_DATA_MESSAGE> =>
                    dispatch endpoint Server over server issues tsmmVideoDataMsg;
                default =>
                    ThrowDecodingException("RDPEVOR", "TSMM_VIDEO_DATA_MESSAGE");
            }
        }
        else
        {
            ThrowDecodingException("RDPEVOR");
        }
    }
}

//--------------------------messages-----------------------------------------//

// 2.2.1.2   TSMM_PRESENTATION_REQUEST Structure
message TSMM_PRESENTATION_REQUEST_MESSAGE
{
    TSMM_PRESENTATION_REQUEST TSMM_PRESENTATION_REQUEST;
    override string ToString()
    {
        return TSMM_PRESENTATION_REQUEST.ToString();
    }
}with Documentation{Ignore = true};

// 2.2.1.3   TSMM_PRESENTATION_RESPONSE Structure
message TSMM_PRESENTATION_RESPONSE_MESSAGE
{
    TSMM_PRESENTATION_RESPONSE TSMM_PRESENTATION_RESPONSE;
    override string ToString()
    {
        return TSMM_PRESENTATION_RESPONSE.ToString();
    }
}with Documentation{Ignore = true};

// 2.2.1.4   TSMM_CLIENT_NOTIFICATION Structure
message TSMM_CLIENT_NOTIFICATION_MESSAGE
{
    TSMM_CLIENT_NOTIFICATION TSMM_CLIENT_NOTIFICATION;
    override string ToString()
    {
        return TSMM_CLIENT_NOTIFICATION.ToString();
    }
}with Documentation{Ignore = true};

// 2.2.1.6   TSMM_VIDEO_DATA Structure
message TSMM_VIDEO_DATA_MESSAGE
{
     TSMM_VIDEO_DATA TSMM_VIDEO_DATA;
     override string ToString()
    {
        return TSMM_VIDEO_DATA.ToString();
    }
}with Documentation{Ignore = true};

//--------------------------messages-----------------------------------------//

// 2.2.1.1   TSMM_VIDEO_PACKET_HEADER Structure
type  TSMM_VIDEO_PACKET_HEADER
{
    uint cbSize;           
    PacketTypePattern PacketType;
};

// 2.2.1.2   TSMM_PRESENTATION_REQUEST Structure
type TSMM_PRESENTATION_REQUEST
{
    TSMM_VIDEO_PACKET_HEADER Header where value.PacketType == PacketTypePattern.TSMM_PACKET_TYPE_PRESENTATION_REQUEST;
    byte PresentationId;           
    byte Version where ValidationCheckValue(value == 0x01, null, true, ReferenceType.Type, "RDPEVOR", "Version", "TSMM_PRESENTATION_REQUEST", "0x01", value);
    CommandSupported Command;    
    byte FrameRate;           
    ushort AverageBitrateKbps;           
    ushort Reserved;           
    uint SourceWidth;           
    uint SourceHeight;           
    uint ScaledWidth;           
    uint ScaledHeight;           
    ulong hnsTimestampOffset;           
    ulong GeometryMappingId;           
    guid VideoSubtypeId;           
    uint cbExtra;           
    optional [|cbExtra > 0|] binary pExtraData with BinaryEncoding{Length = cbExtra};
	byte Reserved2;
    
    override string ToString()
    {
        string summary = "TSMM_PRESENTATION_REQUEST";
        summary += ", PresentationId: " + (PresentationId as string) + ", Command: " + EnumToString(Command, "RDPEVOR.CommandSupported");
        return summary;
    }
};

// 2.2.1.3   TSMM_PRESENTATION_RESPONSE Structure
type TSMM_PRESENTATION_RESPONSE
{
    TSMM_VIDEO_PACKET_HEADER Header where value.PacketType == PacketTypePattern.TSMM_PACKET_TYPE_PRESENTATION_RESPONSE;           
    byte PresentationId;           
    byte ResponseFlags where ValidationCheckZero(value == 0, null, true, ReferenceType.Type, "RDPEVOR", "ResponseFlags", "TSMM_PRESENTATION_RESPONSE", value);
    ushort ResultFlags where ValidationCheckZero(value == 0, null, true, ReferenceType.Type, "RDPEVOR", "ResultFlags", "TSMM_PRESENTATION_RESPONSE", value);
    
    override string ToString()
    {
        string summary = "TSMM_PRESENTATION_RESPONSE";
        summary += ", PresentationId: " + (PresentationId as string);
        return summary;
    }
};

// 2.2.1.4   TSMM_CLIENT_NOTIFICATION Structure
type TSMM_CLIENT_NOTIFICATION
{
    TSMM_VIDEO_PACKET_HEADER Header where value.PacketType == PacketTypePattern.TSMM_PACKET_TYPE_CLIENT_NOTIFICATION;           
    byte PresentationId;           
    NotificationTypePattern NotificationType;           
    ushort Reserved;           
    uint cbData;           
    optional [|NotificationType == NotificationTypePattern.FrameRateOverride|] TSMM_CLIENT_NOTIFICATION_FRAMERATE_OVERRIDE pData;
      
    override string ToString()
    {
        string summary = "TSMM_CLIENT_NOTIFICATION";
        summary += ", PresentationId: " + (PresentationId as string) + ", NotificationType: " + EnumToString(NotificationType, "RDPEVOR.NotificationTypePattern");      
        return summary;
    }
};

// 2.2.1.5   TSMM_CLIENT_NOTIFICATION_FRAMERATE_OVERRIDE Structure
type TSMM_CLIENT_NOTIFICATION_FRAMERATE_OVERRIDE
{
    FlagsSupported Flags;          
    uint DesiredFrameRate where ValidationCheckValueInRange((value >= 1 && value <= 30), null, true, ReferenceType.Type, "RDPEVOR", "DesiredFrameRate", "TSMM_CLIENT_NOTIFICATION_FRAMERATE_OVERRIDE", "1", "30", value);
};

// 2.2.1.6   TSMM_VIDEO_DATA Structure
type TSMM_VIDEO_DATA
{
    TSMM_VIDEO_PACKET_HEADER Header where value.PacketType == PacketTypePattern.TSMM_PACKET_TYPE_VIDEO_DATA;           
    byte PresentationId;           
    byte Version where ValidationCheckValue(value == 0x01, null, true, ReferenceType.Type, "RDPEVOR", "Version", "TSMM_VIDEO_DATA", "0x01", value);        
    TsmmVideoDataFlags Flags where ValidationCheck(InRange<TsmmVideoDataFlags>(value), null, "RDPEVOR: The bits ranging from 1 to 6 of the Flags field in message TSMM_VIDEO_DATA are reserved and should be set to zero.");           
    byte Reserved;           
    ulong hnsTimestamp;           
    ulong hnsDuration;           
    ushort CurrentPacketIndex;           
    ushort PacketsInSample where ValidationCheck(value >= CurrentPacketIndex, null, "RDPEVOR: The CurrentPacketIndex field in message TSMM_VIDEO_DATA should be less than or equal to PacketsInSample field (" + (value as string) + "), not " + (CurrentPacketIndex as string));           
    uint SampleNumber;           
    uint cbSample;           
    optional [|cbSample > 0|] binary pSample with BinaryEncoding{Length = cbSample};   
	byte Reserved2;
       
    override string ToString()
    {
        string summary = "TSMM_VIDEO_DATA";
        summary += ", PresentationId: " + (PresentationId as string) + ", CurrentPacketIndex: " + (CurrentPacketIndex as string) + ", PacketsInSample: " + (PacketsInSample as string) + ", SampleNumber: " + (SampleNumber as string);
        return summary;
    }
};

//--------------------------patterns-----------------------------------------//

pattern PacketTypePattern = enum uint
{
    TSMM_PACKET_TYPE_PRESENTATION_REQUEST = 1,           
    TSMM_PACKET_TYPE_PRESENTATION_RESPONSE = 2,           
    TSMM_PACKET_TYPE_CLIENT_NOTIFICATION = 3,           
    TSMM_PACKET_TYPE_VIDEO_DATA = 4
} with Documentation{Ignore = true};

pattern CommandSupported = enum byte
{
    StartPresentation = 1,           
    StopPresentation = 2
} with Documentation{Ignore = true};

pattern NotificationTypePattern = enum byte
{
    NetworkError = 1,           
    FrameRateOverride = 2
} with Documentation{Ignore = true};

pattern FlagsSupported = enum uint
{
    OverrideFrameRate = 1,           
    UnrestrictedFrameRate = 2
} with Documentation{Ignore = true};

pattern TsmmVideoDataFlags = flags byte
{
    TSMM_VIDEO_DATA_FLAG_HAS_TIMESTAMPS = 0x01,           
    TSMM_VIDEO_DATA_FLAG_KEYFRAME = 0x02,
    ...
} with Documentation{Ignore = true};

