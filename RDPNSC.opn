protocol RDPNSC with
BinaryEncodingDefaults{Endian = Endian.Little},
Documentation
{
    ProtocolName = "Remote Desktop Protocol: NSCodec Extension",
    ShortName = "RDPNSC",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References =
        [
            new Reference{Name = "MS-RDPNSC", Version = "8.0", Date = "08/08/2013", ProgramName = ProgramName.MCPP},
        ],
    RevisionSummary =
        [
            new Revision{Class=RevisionClass.Major, Version="363323", Date="05/08/2014"}
        ]
};

using Standard;
using Utility;

// 2.2.1   NSCodec Capability Set (TS_NSCODEC_CAPABILITYSET)
pattern TS_NSCODEC_CAPABILITYSET_fAllowDynamicFidelity = enum byte
{
    FALSE = 0x00,
    TRUE = 0x01,
    ...
};

pattern TS_NSCODEC_CAPABILITYSET_fAllowSubsampling = enum byte
{
    FALSE = 0x00,
    TRUE = 0x01,
    ...
};

type TS_NSCODEC_CAPABILITYSET
{
    TS_NSCODEC_CAPABILITYSET_fAllowDynamicFidelity fAllowDynamicFidelity where ValidationCheckValueInRange(value == 0x00 || value == 0x01, null, true, ReferenceType.Type, 
                                 "RDPNSC", "fAllowDynamicFidelity", "TS_NSCODEC_CAPABILITYSET", 0, 1, value);
    TS_NSCODEC_CAPABILITYSET_fAllowSubsampling fAllowSubsampling where ValidationCheckValueInRange(value == 0x00 || value == 0x01, null, true, ReferenceType.Type, 
                                 "RDPNSC", "fAllowSubsampling", "TS_NSCODEC_CAPABILITYSET", 0, 1, value);
    byte colorLossLevel where ValidationCheckValueInRange(value >= 1 && value <= 7, null, true, ReferenceType.Type, 
                                 "RDPNSC", "colorLossLevel", "TS_NSCODEC_CAPABILITYSET", 1, 7, value);
};

// 2.2.2   NSCodec Compressed Bitmap Stream (NSCODEC_BITMAP_STREAM)
pattern NSCODEC_BITMAP_STREAM_ChromaSubsamplingLevel = enum byte
{
    FALSE = 0x00,
    TRUE = 0x01,
    ...
};

type NSCODEC_BITMAP_STREAM[ushort ImageWidth, ushort ImageHeight]
{
    uint LumaPlaneByteCount where ValidationCheckGreaterThan(value > 0, null, true, ReferenceType.Type, "RDPNSC", "LumaPlaneByteCount", "NSCODEC_BITMAP_STREAM", 0, value);
    uint OrangeChromaPlaneByteCount where ValidationCheckGreaterThan(value > 0, null, true, ReferenceType.Type, "RDPNSC", "OrangeChromaPlaneByteCount", "NSCODEC_BITMAP_STREAM", 0, value);
    uint GreenChromaPlaneByteCount where ValidationCheckGreaterThan(value > 0, null, true, ReferenceType.Type, "RDPNSC", "GreenChromaPlaneByteCount ", "NSCODEC_BITMAP_STREAM", 0, value);
    uint AlphaPlaneByteCount where ValidationCheckGreaterThan(value > 0, null, true, ReferenceType.Type, "RDPNSC", "AlphaPlaneByteCount ", "NSCODEC_BITMAP_STREAM", 0, value);
    byte ColorLossLevel where ValidationCheckValueInRange(value >= 1 && value <= 7, null, true, ReferenceType.Type, 
                                 "RDPNSC", "ColorLossLevel ", "NSCODEC_BITMAP_STREAM", 1, 7, value);
    NSCODEC_BITMAP_STREAM_ChromaSubsamplingLevel ChromaSubsamplingLevel where ValidationCheckValueInRange(value == 0x00 || value == 0x01, null, true, ReferenceType.Type, 
                                 "RDPNSC", "ChromaSubsamplingLevel", "NSCODEC_BITMAP_STREAM", 0, 1, value);
    short Reserved;
    ([|IsRLECompressed(ChromaSubsamplingLevel, LumaPlaneByteCount, ImageWidth, ImageHeight, 8, 1, 1, 1)|] NSCODEC_RLE_SEGMENTS[LumaPlaneByteCount] 
        | binary) LumaPlane with BinaryEncoding{Length = LumaPlaneByteCount};
    ([|IsRLECompressed(ChromaSubsamplingLevel, OrangeChromaPlaneByteCount, ImageWidth, ImageHeight, 8, 2, 2, 2)|] NSCODEC_RLE_SEGMENTS[OrangeChromaPlaneByteCount] 
        | binary) OrangeChromaPlane with BinaryEncoding{Length = OrangeChromaPlaneByteCount};
    ([|IsRLECompressed(ChromaSubsamplingLevel, GreenChromaPlaneByteCount, ImageWidth, ImageHeight, 8, 2, 2, 2)|] NSCODEC_RLE_SEGMENTS[GreenChromaPlaneByteCount] 
        | binary) GreenChromaPlane with BinaryEncoding{Length = GreenChromaPlaneByteCount};
    optional ([|(AlphaPlaneByteCount > 0 && AlphaPlaneByteCount < ImageWidth * ImageHeight)|] NSCODEC_RLE_SEGMENTS[AlphaPlaneByteCount] 
        | [|(AlphaPlaneByteCount > 0 && AlphaPlaneByteCount >= ImageWidth * ImageHeight)|] binary) AlphaPlane 
        with BinaryEncoding{Length = AlphaPlaneByteCount};
};

// 2.2.2.1   NSCodec RLE Segments (NSCODEC_RLE_SEGMENTS)
type NSCODEC_RLE_SEGMENTS[uint Length]
{
    array<NSCodecRLESegment> Segments with BinaryEncoding{WidthForComposedType = (Length - 4) * 8 as int};
    uint EndData;
};

// 2.2.2.2   NSCodec RLE Segment
// Commented due to low performance, uncommented it after DCR #75561 is resolved.
pattern NSCodecRLESegment = ([|RemainingBitLength(stream) >= 16 && CurrentByte(stream) == PeekByte(stream, stream.BitPosition + 8)|] NSCODEC_RLE_RUN_SEGMENT
                            | NSCODEC_RLE_LITERAL_SEGMENT);

// 2.2.2.2.1   NSCodec RLE Run Segment (NSCODEC_RLE_RUN_SEGMENT)
type NSCODEC_RLE_RUN_SEGMENT
{
    byte RunValue;
    byte RunConfirm; // checked RunConfirm == RunValue in pattern NSCodecRLESegment
    byte RunLengthFactor1;
    optional [|RunLengthFactor1 == 0xFF|] uint RunLengthFactor2;
};

// 2.2.2.2.2   NSCodec RLE Literal Segment (NSCODEC_RLE_LITERAL_SEGMENT)
type NSCODEC_RLE_LITERAL_SEGMENT
{
    byte RunValue;
};

// Round [num] to the multiple of [baseNum]
uint Round(uint num, uint baseNum)
{
    uint mod = num % baseNum;
    if (mod == 0)
    {
        return num;
    }
    else
    {
        return num + (baseNum - mod);
    }
}

// section 2.2.2   NSCodec Compressed Bitmap Stream (NSCODEC_BITMAP_STREAM)
// Check if a chroma channel has been RLE compressed
bool IsRLECompressed(NSCODEC_BITMAP_STREAM_ChromaSubsamplingLevel subsampled, uint planeByteCount, ushort imageWidth, 
                            ushort imageHeight, uint widthRound, uint heightRound, uint widthDivisor, uint heightDivisor)
{
    if (subsampled == NSCODEC_BITMAP_STREAM_ChromaSubsamplingLevel.TRUE)
    {
        return planeByteCount < (Round(imageWidth as uint, widthRound) / widthDivisor) * (Round(imageHeight as uint, heightRound) / heightDivisor);
    }
    else 
    {
        return planeByteCount < (imageWidth * imageHeight) as uint;
    }
}
