protocol RDPEGT with
    BinaryEncodingDefaults{Endian = Endian.Little},
Documentation
{
    DocumentName = "MS-RDPEGT",
    ProtocolName = "Remote Desktop Protocol: Geometry Tracking Virtual Channel Protocol Extension",
    ProtocolType = "block",
    ShortName    = "RDPEGT",
    Description  = ""
},
OPNAuthoring
{
    Copyright  = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "MS-RDPEGT", Version = "2.0", Date = "01/31/2013", ProgramName = ProgramName.MCPP},
            new Reference{Name = "MSDN-WindowsGDI", Link = "http://msdn.microsoft.com/en-us/library/dd145203.aspx"}
        ],
    RevisionSummary =
        [
            new Revision{Class = RevisionClass.Major, Version = "355026", Date = "10/10/2013"}
        ]
};

using Standard;
using Utility;
using RDPEDYC;
using DTYP;
using WindowsReference;

endpoint Server over RDPEDYC.Server issues MAPPED_GEOMETRY_PACKET_MESSAGE;

client endpoint Client connected to Server;

autostart actor RdpegtOverRdpedyc(RDPEDYC.Server dycServer)
{
    // Future Reference: will investigate if take care of accepting direction 
    process dycServer issues s:RDPEDYC.DVCDataPDU where (s#EDYCChannelName != nothing && ((s#EDYCChannelName as string) == "Microsoft::Windows::RDS::Geometry::v08.01"))
    {
        switch (s.Data)
        {
            case mgPacket:MAPPED_GEOMETRY_PACKET_MESSAGE from BinaryDecoder<MAPPED_GEOMETRY_PACKET_MESSAGE> =>
                
                dispatch endpoint Server over dycServer issues mgPacket;
            default =>
                ThrowDecodingException("RDPEGT", "MAPPED_GEOMETRY_PACKET");
        }
    }
}

//--------------------------messages-----------------------------------------//

// WORKAROUND: Currently used a work around so that TDgen can generate a structure
message MAPPED_GEOMETRY_PACKET_MESSAGE
{
    MAPPED_GEOMETRY_PACKET MAPPED_GEOMETRY_PACKET;
}with Documentation{Ignore = true};

//--------------------------types-----------------------------------------//

// 2.2.1.1   MAPPED_GEOMETRY_PACKET Structure
type MAPPED_GEOMETRY_PACKET
{
    UINT32 cbGeometryData;
    UINT32 Version where ValidationCheck(value == 0x01, null, "RDPEGT: The Version in message MAPPED_GEOMETRY_PACKET must be set to 0x01 in Microsoft RDP 8.0 servers.");
    UINT64 MappingId;
    MAPPED_GEOMETRY_PACKET_UPDATE_TYPE UpdateType 
        where ValidationCheck(InRange<MAPPED_GEOMETRY_PACKET_UPDATE_TYPE>(value), null, 
            () => "RDPEGT: The UpdateType in message MAPPED_GEOMETRY_PACKET should be 0x01 or 0x02, not " + Utility.DecToHexFormat(2, value) + ".");
    UINT32 Flags where ValidationCheck(value == 0, null, "RDPEGT: The Flags in message MAPPED_GEOMETRY_PACKET must be set to 0x0.");
    UINT64 TopLevelId;
    INT32 Left;
    INT32 Top;
    INT32 Right;
    INT32 Bottom;
    INT32 TopLevelLeft;
    INT32 TopLevelTop;
    INT32 TopLevelRight;
    INT32 TopLevelBottom;
    UINT32 GeometryType where ValidationCheck(value == 0x02 || UpdateType == MAPPED_GEOMETRY_PACKET_UPDATE_TYPE.GEOMETRY_CLEAR, null, "RDPEGT: The GeometryType in message MAPPED_GEOMETRY_PACKET must be set to 0x02 in Microsoft RDP 8.0 servers.");
    UINT32 cbGeometryBuffer;
    (RGNDATA | binary) pGeometryBuffer with BinaryEncoding{WidthForComposedType = cbGeometryBuffer * 8 as int , Length = cbGeometryBuffer}; 
    UINT8 Reserved;    
    
    override string ToString()
    {
        string summary;
        summary = "MAPPED_GEOMETRY_PACKET, ";
        summary += "MappingId = " + (MappingId as string) + ", ";
        summary += "Position = [" + (Left as string) + ", " + (Top as string) + ", " + (Right as string) + ", " + (Bottom as string) + "]";
        return summary;
    }
};

//--------------------------patterns-----------------------------------------//

pattern MAPPED_GEOMETRY_PACKET_UPDATE_TYPE = enum uint
{
    GEOMETRY_UPDATE = 1,
    GEOMETRY_CLEAR = 2,
    ...
} with Documentation{Ignore = true};
