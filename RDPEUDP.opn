protocol RDPEUDP with
Visualization{AliasName = "RDP"},
BinaryEncodingDefaults{Endian = Endian.Big},
Documentation
{
    ProtocolName = "Remote Desktop Protocol: UDP Transport Extension",
    DocumentName = "MS-RDPEUDP",
    ShortName = "RDPEUDP",
    ProtocolType = "block",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "MS-RDPEUDP", Version = "4.0", Date = "01/31/2013", ProgramName = ProgramName.MCPP},
        ],
    RevisionSummary =
        [
            new Revision{Class = RevisionClass.Major, Version = "372482", Date = "12/16/2014"}
        ]
};

using Standard;
using Utility;
using UDP;

annotation bool ACKDatagram#IsKeepAlive;

endpoint Server accepts ACKDatagram issues ACKDatagram;

endpoint EncryptionServer over UDP.Host accepts SYNDatagram accepts ACKDatagram issues SYNDatagram issues ACKDatagram
{
    binary LocalAddress;
    binary RemoteAddress;
    ushort LocalPort;
    ushort RemotePort;
}

client endpoint Client connected to Server;

autostart actor RDPOverUDP(UDP.Host host)
{
    EncryptionServer e = endpoint EncryptionServer over host;
    
    process host accepts p:UDP.Datagram where p.Payload.Count > 0 && p.DestinationPort == 3389
    {
        if (e.LocalAddress == null)
        {
            e.LocalAddress = p#DestinationAddress is b1:binary ? b1 : $[];
            e.RemoteAddress = p#SourceAddress is b2:binary ? b2 : $[];
            e.LocalPort = p.DestinationPort;
            e.RemotePort = p.SourcePort;
        }

        switch (p.Payload)
        {
            case d:SYNDatagram from BinaryDecoder<SYNDatagram> =>
                dispatch e accepts d;
            case d:ACKDatagram from BinaryDecoder<ACKDatagram> =>
                if (IsCongestionNotification(d))
                {
                    ErrorCodeIf(true, d, DiagnosisLevel.Information, "RDPEUDP: Congestion Notification");
                }
                if (IsCongestionWindowReset(d))
                {
                    ErrorCodeIf(true, d, DiagnosisLevel.Information, "RDPEUDP: Congestion Window Reset");
                }
                dispatch e accepts d;
            default =>
                ThrowDecodingException("RDPEUDP");
        }
    }
    
    process host accepts p:UDP.Datagram where p.Payload.Count > 0 && p.SourcePort == 3389
    {
        if (e.LocalAddress == null)
        {
            e.LocalAddress = p#SourceAddress is b1:binary ? b1 : $[];
            e.RemoteAddress = p#DestinationAddress is b2:binary ? b2 : $[];
            e.LocalPort = p.SourcePort;
            e.RemotePort = p.DestinationPort;
        }
        
        switch (p.Payload)
        {
            case d:SYNDatagram from BinaryDecoder<SYNDatagram> =>
                dispatch e issues d;
            case d:ACKDatagram from BinaryDecoder<ACKDatagram> =>
                if (IsCongestionNotification(d))
                {
                    ErrorCodeIf(true, d, DiagnosisLevel.Information, "RDPEUDP: Congestion Notification");
                }
                if (IsCongestionWindowReset(d))
                {
                    ErrorCodeIf(true, d, DiagnosisLevel.Information, "RDPEUDP: Congestion Window Reset");
                }
                dispatch e issues d;
            default =>
                ThrowDecodingException("RDPEUDP");
        }
    }
}

bool IsSynLossyMode(SYNDatagram d)
{
    return (d.FecHeader.uFlags & Flags.RDPUDP_FLAG_SYNLOSSY) == Flags.RDPUDP_FLAG_SYNLOSSY;
}

// 3.1.5.1.1    SYN Datagrams   &   3.1.5.1.3   SYN and ACK Datagrams
message SYNDatagram
{
    RDPUDP_FEC_HEADER FecHeader where ((Flags.RDPUDP_FLAG_SYN & value.uFlags) == Flags.RDPUDP_FLAG_SYN) &&
        ValidationCheckValue(((Flags.RDPUDP_FLAG_ACK & value.uFlags) == Flags.RDPUDP_FLAG_ACK) ? true : value.snSourceAck == 0xFFFFFFFF, this, true, ReferenceType.Message, "RDPEUDP", "FecHeader.snSourceAck", "SYNDatagram", "-1", value);
    RDPUDP_SYNDATA_PAYLOAD SyndataPayload;
    binary Padding where ValidationCheckValue(value.Count == 1216, this, true, ReferenceType.Message, "RDPEUSB", "byte count of Padding", "SYNDatagram", "1216 bytes", value.Count);
    override string ToString()
    {
        string summary = ((Flags.RDPUDP_FLAG_ACK & FecHeader.uFlags) == Flags.RDPUDP_FLAG_ACK ? "SYN and ACK Datagram, " : "SYN Datagram, ") + "snInitialSequenceNumber: " + (SyndataPayload.snInitialSequenceNumber as string);
        return summary + ((Flags.RDPUDP_FLAG_ACK & FecHeader.uFlags) == Flags.RDPUDP_FLAG_ACK ? ", snSourceAck: " + (FecHeader.snSourceAck as string) : "");
    }
} with Documentation{Ignore = true};

// 3.1.5.1.2    ACK Datagrams   &   3.1.5.1.4   ACK and Source Packets Data     &   3.1.5.1.5   ACK and FEC Packets Data
message ACKDatagram
{
    RDPUDP_FEC_HEADER FecHeader where ((Flags.RDPUDP_FLAG_ACK & value.uFlags) == Flags.RDPUDP_FLAG_ACK);
    RDPUDP_ACK_VECTOR_HEADER AckVectorHeader;
    optional [|(Flags.RDPUDP_FLAG_ACK_OF_ACKS & FecHeader.uFlags) == Flags.RDPUDP_FLAG_ACK_OF_ACKS|] RDPUDP_ACK_OF_ACKVECTOR_HEADER AckOfAckvectorHeader;
    optional [|((Flags.RDPUDP_FLAG_DATA & FecHeader.uFlags) == Flags.RDPUDP_FLAG_DATA) && ((Flags.RDPUDP_FLAG_FEC & FecHeader.uFlags) != Flags.RDPUDP_FLAG_FEC)|] RDPUDP_SOURCE_PAYLOAD_HEADER SourcePayloadHeader;
    optional [|((Flags.RDPUDP_FLAG_DATA & FecHeader.uFlags) == Flags.RDPUDP_FLAG_DATA) && ((Flags.RDPUDP_FLAG_FEC & FecHeader.uFlags) != Flags.RDPUDP_FLAG_FEC)|] binary Payload;
    optional [|((Flags.RDPUDP_FLAG_DATA & FecHeader.uFlags) == Flags.RDPUDP_FLAG_DATA) && ((Flags.RDPUDP_FLAG_FEC & FecHeader.uFlags) == Flags.RDPUDP_FLAG_FEC)|] RDPUDP_FEC_PAYLOAD_HEADER FecPayloadHeader;
    optional [|((Flags.RDPUDP_FLAG_DATA & FecHeader.uFlags) == Flags.RDPUDP_FLAG_DATA) && ((Flags.RDPUDP_FLAG_FEC & FecHeader.uFlags) == Flags.RDPUDP_FLAG_FEC)|] binary FecPayload;
    
    override string ToString()
    {
        string summary = "";
        summary += (Flags.RDPUDP_FLAG_DATA & FecHeader.uFlags) == Flags.RDPUDP_FLAG_DATA ? ((Flags.RDPUDP_FLAG_FEC & FecHeader.uFlags) == Flags.RDPUDP_FLAG_FEC ? "ACK and FEC Packets Data" : "ACK and Source Packets Data") : "ACK Datagram";
        if (this#IsKeepAlive != nothing && this#IsKeepAlive as bool)
        {
            summary += ", Keep-Alive";
        }
        
        if((Flags.RDPUDP_FLAG_DATA & FecHeader.uFlags) == Flags.RDPUDP_FLAG_DATA && (Flags.RDPUDP_FLAG_FEC & FecHeader.uFlags) != Flags.RDPUDP_FLAG_FEC)
        {
            summary += ", snCoded: " + ((SourcePayloadHeader as RDPUDP_SOURCE_PAYLOAD_HEADER).snCoded as string) + ", snSourceStart: " + ((SourcePayloadHeader as RDPUDP_SOURCE_PAYLOAD_HEADER).snSourceStart as string);
        }
        else if((Flags.RDPUDP_FLAG_DATA & FecHeader.uFlags) == Flags.RDPUDP_FLAG_DATA && (Flags.RDPUDP_FLAG_FEC & FecHeader.uFlags) == Flags.RDPUDP_FLAG_FEC)
        {
            summary += ", snCoded: " + ((FecPayloadHeader as RDPUDP_FEC_PAYLOAD_HEADER).snCoded as string) + ", snSourceStart: " + ((FecPayloadHeader as RDPUDP_FEC_PAYLOAD_HEADER).snSourceStart as string);
        }
        summary += ", snSourceAck: " + (FecHeader.snSourceAck as string);
        return summary;
    }
} with Documentation{Ignore = true};

bool IsDatagramReceived(ACKDatagram d)
{
    var vector = d.AckVectorHeader.AckVectorElement;
    foreach (var e in vector)
    {
        if (e.VectorElementState == VECTOR_ELEMENT_STATE.DATAGRAM_NOT_YET_RECEIVED)
        {
            return false;
        }
    }
    return true;
}

uint get SequenceNumber(this ACKDatagram d)
{
    if (IsDataPacket(d) && IsFecPacket(d))
    {
        return (d.FecPayloadHeader as RDPUDP_FEC_PAYLOAD_HEADER).snSourceStart;
    }
    else if (IsDataPacket(d) && !IsFecPacket(d))
    {
        return (d.SourcePayloadHeader as RDPUDP_SOURCE_PAYLOAD_HEADER).snSourceStart;
    }
    else
    {
        return d.FecHeader.snSourceAck;
    }
}

bool IsDataPacket(ACKDatagram d)
{
    return ((d.FecHeader.uFlags & Flags.RDPUDP_FLAG_DATA) == Flags.RDPUDP_FLAG_DATA);
}

bool IsFecPacket(ACKDatagram d)
{
    return ((d.FecHeader.uFlags & Flags.RDPUDP_FLAG_FEC) == Flags.RDPUDP_FLAG_FEC);
}

bool IsSynPacket(ACKDatagram d)
{
    return ((d.FecHeader.uFlags & Flags.RDPUDP_FLAG_SYN) == Flags.RDPUDP_FLAG_SYN);
}

bool IsCongestionNotification(ACKDatagram d)
{
    return ((d.FecHeader.uFlags & Flags.RDPUDP_FLAG_CN) == Flags.RDPUDP_FLAG_CN);
}

bool IsCongestionWindowReset(ACKDatagram d)
{
    return ((d.FecHeader.uFlags & Flags.RDPUDP_FLAG_CWR) == Flags.RDPUDP_FLAG_CWR);
}

type SortedDatagramList
{
    DatagramListNode Head = null;
    DatagramListNode Rear = null;
    uint InitialSequenceNumber;
    
    void Insert(ACKDatagram d)
    {
        var newNode = new DatagramListNode{Datagram = d};
        
        // Insert the node into an empty list
        if (Head == null)
        {
            Head = newNode;
            Rear = newNode;
            return;
        }
        
        if (SequenceComparer(Rear.Datagram.SequenceNumber, d.SequenceNumber, InitialSequenceNumber) <= 0)
        {
            // Add the segment to the rear of the list since it is sequential
            Rear.Next = newNode;
            newNode.Previous = Rear;
            Rear = newNode;
            return;
        }
        else
        {
            // Find the proper position and insert
            var temp = Rear.Previous;
            // Move forward till the head or find the place to insert
            while (temp != null && SequenceComparer(temp.Datagram.SequenceNumber, d.SequenceNumber, InitialSequenceNumber) > 0)
            {
                temp = temp.Previous;
            }
            // Insert
            if (temp == null)
            {
                // Reached the head of the list
                Head.Previous = newNode;
                newNode.Next = Head;
                Head = newNode;
            }
            else
            {
                // Insert the new node in current position, which is in the middle of the list
                newNode.Next = temp.Next;
                temp.Next = newNode;
                newNode.Previous = temp;
                var nextNode = newNode.Next;
                nextNode.Previous = newNode;
            }
        }
    }
    
    void RemoveHead()
    {
        if (Head == null)
        {
            return;
        }
        Head = Head.Next;
        if (Head == null)
        {
            Rear = null;
        }
        else
        {
            Head.Previous = null;
        }
    }

    void Clear()
    {
        Head = null;
        Rear = null;
    }
} with Documentation{Ignore = true};

type DatagramListNode
{
    ACKDatagram Datagram;
    DatagramListNode PreviousNode;
    DatagramListNode NextNode;
} with Documentation{Ignore = true};

DatagramListNode get Previous(this DatagramListNode node)
{
    return node.PreviousNode as DatagramListNode;
}

void set Previous(this DatagramListNode node, DatagramListNode previousNode)
{
    node.PreviousNode = previousNode;
}

DatagramListNode get Next(this DatagramListNode node)
{
    return node.NextNode as DatagramListNode;
}

void set Next(this DatagramListNode node, DatagramListNode nextNode)
{
    node.NextNode = nextNode;
}

int SequenceComparer(uint x, uint y, uint isn)
{
    if (x == y)
    {
        return 0;
    }
    if (x >= isn)
    {
        if (y >= isn)
        {
            return (x - y) as int;
        }
        else
        {
            return SequenceComparer1(x, y, isn);
        }
    }
    else
    {
        if (y <= isn)
        {
            return (x - y) as int;
        }
        else
        {
            return SequenceComparer1(x, y, isn);
        }
    }
}

const uint SemiMaxSequenceNumber = 0x80000000;
const uint MaxSequenceNumber = 0xFFFFFFFF;

int SequenceComparer1(uint x, uint y, uint isn)
{
    // Assuming y < isn < x
    var isn1 = (isn + SemiMaxSequenceNumber) as uint;
    if (isn >= SemiMaxSequenceNumber)
    {
        if (y >= isn1)
        {
            return 1;
        }
        else
        {
            return -1;
        }
    }
    else
    {
        if (x < isn1)
        {
            return 1;
        }
        else
        {
            return -1;
        }
    }
}

//-------------------------- Data Defination (Also be used for generating TD)-----------------------------------------//

// 2.2.2.1      RDPUDP_FEC_HEADER Structure
type RDPUDP_FEC_HEADER
{
    uint snSourceAck;
    ushort uReceiveWindowSize;
    Flags uFlags;
}

// 2.2.2.2      RDPUDP_FEC_PAYLOAD_HEADER Structure
type RDPUDP_FEC_PAYLOAD_HEADER
{
    uint snCoded;
    uint snSourceStart;
    ushort uSourceRange;
    ushort uFecIndex;
    array<byte> uPadding with BinaryEncoding{WidthForComposedType = 32};
}

// 2.2.2.3      RDPUDP_PAYLOAD_PREFIX Structure
type RDPUDP_PAYLOAD_PREFIX
{    
    ushort cbPayloadSize;
};

// 2.2.2.4      RDPUDP_SOURCE_PAYLOAD_HEADER Structure
type RDPUDP_SOURCE_PAYLOAD_HEADER
{
    uint snCoded;
    uint snSourceStart;
}

// 2.2.2.5      RDPUDP_SYNDATA_PAYLOAD Structure
type RDPUDP_SYNDATA_PAYLOAD
{
    uint snInitialSequenceNumber;
    ushort uUpStreamMtu
        where ValidationCheckValueInRange((value >= 1132 && value <= 1232), null, true, ReferenceType.Type, "RDPEUDP", "uUpStreamMtu", "RDPUDP_SYNDATA_PAYLOAD", "1132", "1232", value);
    ushort uDownStreamMtu
        where ValidationCheckValueInRange((value >= 1132 && value <= 1232), null, true, ReferenceType.Type, "RDPEUDP", "uDownStreamMtu", "RDPUDP_SYNDATA_PAYLOAD", "1132", "1232", value);
}

// 2.2.2.6      RDPUDP_ACK_OF_ACKVECTOR_HEADER Structure
type RDPUDP_ACK_OF_ACKVECTOR_HEADER
{
    uint snAckOfAcksSeqNum;
}

// 2.2.2.7      RDPUDP_ACK_VECTOR_HEADER Structure
type RDPUDP_ACK_VECTOR_HEADER
{
    ushort uAckVectorSize;
    array<RDPUDP_ACK_VECTOR> AckVectorElement with BinaryEncoding{Length = uAckVectorSize};
    optional [|(2 + (uAckVectorSize as uint)) % 4 != 0|] binary Padding with BinaryEncoding{Length = 4 - ((2 + (uAckVectorSize)) % 4)};
}

// 2.2.1.1      VECTOR_ELEMENT_STATE Enumeration
pattern VECTOR_ELEMENT_STATE = enum byte
{
    DATAGRAM_RECEIVED = 0,
    DATAGRAM_RESERVED_1 = 1,
    DATAGRAM_RESERVED_2 = 2,
    DATAGRAM_NOT_YET_RECEIVED = 3
};

// 2.2.3.1      ACK Vector
type RDPUDP_ACK_VECTOR
{
    VECTOR_ELEMENT_STATE VectorElementState with BinaryEncoding{Width = 2};
    byte Length with BinaryEncoding{Width = 6};
} with Documentation{Ignore = true};

pattern Flags = flags ushort
{
    RDPUDP_FLAG_CORRELATION_ID = 0x0800,
    RDPUDP_FLAG_ACKDELAYED     = 0x0400,
    RDPUDP_FLAG_SYNLOSSY       = 0x0200,
    RDPUDP_FLAG_ACK_OF_ACKS    = 0x0100,
    RDPUDP_FLAG_SACK_OPTION    = 0x0080,
    RDPUDP_FLAG_CWR            = 0x0040,
    RDPUDP_FLAG_CN             = 0x0020,
    RDPUDP_FLAG_FEC            = 0x0010,
    RDPUDP_FLAG_DATA           = 0x0008,
    RDPUDP_FLAG_ACK            = 0x0004,
    RDPUDP_FLAG_FIN            = 0x0002,
    RDPUDP_FLAG_SYN            = 0x0001,
    ...
} with Documentation{Ignore = true};
