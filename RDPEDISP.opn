protocol RDPEDISP with
    BinaryEncodingDefaults{Endian = Endian.Little},
Documentation
{
    ProtocolName = "Remote Desktop Protocol: Display Update Virtual Channel Extension",
    DocumentName = "MS-RDPEDISP",
    ShortName = "RDPEDISP",
    ProtocolType = "block",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "MS-RDPEDISP", Version = "2.0", Date = "11/14/2013", ProgramName = ProgramName.MCPP},
        ],
    RevisionSummary =
        [
            new Revision{Class = RevisionClass.Major, Version = "358947", Date = "01/21/2014"}
        ]
};

using Standard;
using Utility;
using RDPEDYC;
using RemoteDesktopResources;

endpoint Server over RDPEDYC.Server issues DISPLAYCONTROL_CAPS_PDU accepts DISPLAYCONTROL_MONITOR_LAYOUT_PDU;

client endpoint Client connected to Server;

autostart actor RdpedispOverRdpedyc(RDPEDYC.Server dycServer)
{
    process dycServer issues s:RDPEDYC.DVCDataPDU where (s#EDYCChannelName != nothing && ((s#EDYCChannelName as string) == "Microsoft::Windows::RDS::DisplayControl"))
    {
        switch (s.Data)
        {
            case m:DISPLAYCONTROL_CAPS_PDU from BinaryDecoder<DISPLAYCONTROL_CAPS_PDU> =>
                dispatch endpoint Server over dycServer issues m;
            default =>
                ThrowDecodingException("RDPEDISP", "DISPLAYCONTROL_CAPS_PDU");
        }
    }
    
    process dycServer accepts s:RDPEDYC.DVCDataPDU where (s#EDYCChannelName != nothing && ((s#EDYCChannelName as string) == "Microsoft::Windows::RDS::DisplayControl"))
    {
        switch (s.Data)
        {
            case m:DISPLAYCONTROL_MONITOR_LAYOUT_PDU from BinaryDecoder<DISPLAYCONTROL_MONITOR_LAYOUT_PDU> =>
                dispatch endpoint Server over dycServer accepts m;
            default =>
                ThrowDecodingException("RDPEDISP", "DISPLAYCONTROL_MONITOR_LAYOUT_PDU");
        }
    }
}

// Section 2.2.1.1 DISPLAYCONTROL_HEADER
type DISPLAYCONTROL_HEADER
{
    DISPLAYCONTROL_HEADER_Type Type;
    uint Length;
}

pattern DISPLAYCONTROL_HEADER_Type = enum uint
{
    DISPLAYCONTROL_PDU_TYPE_CAPS = 0x00000005,
    DISPLAYCONTROL_PDU_TYPE_MONITOR_LAYOUT = 0x00000002,
    ...
};

// Section 2.2.2.1 DISPLAYCONTROL_CAPS_PDU
message DISPLAYCONTROL_CAPS_PDU
{
    DISPLAYCONTROL_HEADER Header where value.Type == DISPLAYCONTROL_HEADER_Type.DISPLAYCONTROL_PDU_TYPE_CAPS;
    uint MaxNumMonitors;
    uint MaxMonitorAreaFactorA;
    uint MaxMonitorAreaFactorB;

    override string ToString()
    {
        return "DISPLAYCONTROL_CAPS_PDU, MaxNumMonitors: " + MaxNumMonitors.ToString();
    }
}

// Section 2.2.2.2 DISPLAYCONTROL_MONITOR_LAYOUT_PDU
message DISPLAYCONTROL_MONITOR_LAYOUT_PDU
{
    DISPLAYCONTROL_HEADER Header where value.Type == DISPLAYCONTROL_HEADER_Type.DISPLAYCONTROL_PDU_TYPE_MONITOR_LAYOUT;
    uint MonitorLayoutSize where ValidationCheckValue(value == 40, this, true, ReferenceType.Message, "RDPEDISP", "MonitorLayoutSize", "DISPLAYCONTROL_MONITOR_LAYOUT_PDU", "40", value);
    uint NumMonitors;
    array<DISPLAYCONTROL_MONITOR_LAYOUT> Monitors with BinaryEncoding{Length = NumMonitors};

    override string ToString()
    {
        return "DISPLAYCONTROL_MONITOR_LAYOUT_PDU, NumMonitors: " + NumMonitors.ToString();
    }
}

// Section 2.2.2.2.1 DISPLAYCONTROL_MONITOR_LAYOUT
type DISPLAYCONTROL_MONITOR_LAYOUT
{
    DISPLAYCONTROL_MONITOR_LAYOUT_Flags Flags where ValidationCheckCombinationValue(InRange<DISPLAYCONTROL_MONITOR_LAYOUT_Flags>(value), null, true, ReferenceType.Type,
            "RDPEDISP", "Flags", "DISPLAYCONTROL_MONITOR_LAYOUT", "0x00000001", value);
    int Left;
    int Top;
    uint Width where ValidationCheckValueInRange(value <= 8192 && value >= 200, null, true, ReferenceType.Type, "RDPEDISP", "Width", "DISPLAYCONTROL_MONITOR_LAYOUT", 200, 8192, value)
            && ValidationCheck((value & 0x00000001) == 0, null, DiagnosisLevel.Error, RDPEDISP_DISPLAY_MONITOR_LAYOUT_WIDTH_STR);
    uint Height where ValidationCheckValueInRange(value <= 8192 && value >= 200, null, true, ReferenceType.Type, "RDPEDISP", "Height", "DISPLAYCONTROL_MONITOR_LAYOUT", 200, 8192, value);
    uint PhysicalWidth;
    uint PhysicalHeight;
    DISPLAYCONTROL_MONITOR_LAYOUT_Orientation Orientation where ValidationCheckEnumValue(InRange<DISPLAYCONTROL_MONITOR_LAYOUT_Orientation>(value), null, true, ReferenceType.Type, 
            "RDPEDISP", "Orientation", "DISPLAYCONTROL_MONITOR_LAYOUT", "0, 90, 180, 270", value);
    uint DesktopScaleFactor;
    uint DeviceScaleFactor;
}

pattern DISPLAYCONTROL_MONITOR_LAYOUT_Flags = flags uint
{
    DISPLAYCONTROL_MONITOR_PRIMARY = 0x00000001,
    ...
};

pattern DISPLAYCONTROL_MONITOR_LAYOUT_Orientation = enum uint
{
    ORIENTATION_LANDSCAPE = 0,
    ORIENTATION_PORTRAIT  = 90,
    ORIENTATION_LANDSCAPE_FLIPPED = 180,
    ORIENTATION_PORTRAIT_FLIPPED = 270,
    ...
};
