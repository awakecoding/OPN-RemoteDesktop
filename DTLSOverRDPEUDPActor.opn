protocol DTLSOverRDPEUDPActor with
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
        ],
    RevisionSummary =
        [
            new Revision{Class = RevisionClass.Major, Version = "365107", Date = "06/26/2014"}
        ]
};

using Standard;
using Utility;
using TLS;
using DTLS;
using RDPEUDP;
using TLSOverRDPEUDPActor;

autostart actor DTLSOverRDPEUDP(RDPEUDP.EncryptionServer server) precedes TLSOverRDPEUDP
{
    TLS.SessionContext DtlsClientContext = null;
    TLS.SessionContext DtlsServerContext =  null;
    bool IsSynLossy = true;
    
    observe server accepts d:SYNDatagram
    {
        IsSynLossy = IsSynLossyMode(d);
    }
    
    // Unreliable Mode
    process server accepts d:ACKDatagram where IsSynLossy && IsDataPacket(d) && !IsFecPacket(d) && d.Payload is bin:binary && IsDtlsHeader(bin) && IsCompleteDtls(bin)
    {
        if (DtlsClientContext == null)
        {
            InitializeContextPair(ref DtlsClientContext, ref DtlsServerContext);
        }
        
        IsSynLossy = true;
        var res = DTLSDecoder(bin, DtlsClientContext);
        if (res == nothing)
        {
            ThrowDecodingException("DTLS", "RecordLayers");
        }
        else
        {
            var n = endpoint DTLS.Server over server;
            dispatch n accepts (res as DTLS.RecordLayers);
        }
    }
    
    process server issues d:ACKDatagram where IsSynLossy && IsDataPacket(d) && !IsFecPacket(d) && d.Payload is bin:binary && IsDtlsHeader(bin) && IsCompleteDtls(bin)
    {
        if (DtlsServerContext == null)
        {
            InitializeContextPair(ref DtlsClientContext, ref DtlsServerContext);
        }
        
        IsSynLossy = true;
        var res = DTLSDecoder(bin, DtlsServerContext);
        if (res == nothing)
        {
            ThrowDecodingException("DTLS", "RecordLayers");
        }
        else
        {
            var n = endpoint DTLS.Server over server;
            dispatch n issues (res as DTLS.RecordLayers);
        }
    }
}
